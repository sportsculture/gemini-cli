diff --git a/packages/core/src/config/config.ts b/packages/core/src/config/config.ts
index c92fb623..0f6af029 100644
--- a/packages/core/src/config/config.ts
+++ b/packages/core/src/config/config.ts
@@ -11,7 +11,6 @@ import {
   ContentGeneratorConfig,
   createContentGeneratorConfig,
 } from '../core/contentGenerator.js';
-import { PromptRegistry } from '../prompts/prompt-registry.js';
 import { ToolRegistry } from '../tools/tool-registry.js';
 import { LSTool } from '../tools/ls.js';
 import { ReadFileTool } from '../tools/read-file.js';
@@ -25,7 +24,7 @@ import { ReadManyFilesTool } from '../tools/read-many-files.js';
 import {
   MemoryTool,
   setGeminiMdFilename,
-  GEMINI_CONFIG_DIR as GEMINI_DIR,
+  SPRTSCLTR_CONFIG_DIR as SPRTSCLTR_DIR,
 } from '../tools/memoryTool.js';
 import { WebSearchTool } from '../tools/web-search.js';
 import { GeminiClient } from '../core/client.js';
@@ -46,7 +45,6 @@ import {
 import { ClearcutLogger } from '../telemetry/clearcut-logger/clearcut-logger.js';
 import { shouldAttemptBrowserLaunch } from '../utils/browser.js';
 import { MCPOAuthConfig } from '../mcp/oauth-provider.js';
-import { IdeClient } from '../ide/ide-client.js';
 
 // Re-export OAuth config type
 export type { MCPOAuthConfig };
@@ -81,7 +79,6 @@ export interface GeminiCLIExtension {
   name: string;
   version: string;
   isActive: boolean;
-  path: string;
 }
 export interface FileFilteringOptions {
   respectGitIgnore: boolean;
@@ -121,15 +118,9 @@ export class MCPServerConfig {
     readonly extensionName?: string,
     // OAuth configuration
     readonly oauth?: MCPOAuthConfig,
-    readonly authProviderType?: AuthProviderType,
   ) {}
 }
 
-export enum AuthProviderType {
-  DYNAMIC_DISCOVERY = 'dynamic_discovery',
-  GOOGLE_CREDENTIALS = 'google_credentials',
-}
-
 export interface SandboxConfig {
   command: 'docker' | 'podman' | 'sandbox-exec';
   image: string;
@@ -147,6 +138,7 @@ export interface ConfigParameters {
   sandbox?: SandboxConfig;
   targetDir: string;
   debugMode: boolean;
+  debugTools?: boolean;
   question?: string;
   fullContext?: boolean;
   coreTools?: string[];
@@ -156,7 +148,7 @@ export interface ConfigParameters {
   mcpServerCommand?: string;
   mcpServers?: Record<string, MCPServerConfig>;
   userMemory?: string;
-  geminiMdFileCount?: number;
+  sprtscltrMdFileCount?: number;
   approvalMode?: ApprovalMode;
   showMemoryUsage?: boolean;
   contextFileName?: string | string[];
@@ -183,18 +175,18 @@ export interface ConfigParameters {
   noBrowser?: boolean;
   summarizeToolOutput?: Record<string, SummarizeToolOutputSettings>;
   ideMode?: boolean;
-  ideClient?: IdeClient;
+  listModels?: boolean;
 }
 
 export class Config {
   private toolRegistry!: ToolRegistry;
-  private promptRegistry!: PromptRegistry;
   private readonly sessionId: string;
   private contentGeneratorConfig!: ContentGeneratorConfig;
   private readonly embeddingModel: string;
   private readonly sandbox: SandboxConfig | undefined;
   private readonly targetDir: string;
   private readonly debugMode: boolean;
+  private readonly debugTools: boolean;
   private readonly question: string | undefined;
   private readonly fullContext: boolean;
   private readonly coreTools: string[] | undefined;
@@ -204,7 +196,7 @@ export class Config {
   private readonly mcpServerCommand: string | undefined;
   private readonly mcpServers: Record<string, MCPServerConfig> | undefined;
   private userMemory: string;
-  private geminiMdFileCount: number;
+  private sprtscltrMdFileCount: number;
   private approvalMode: ApprovalMode;
   private readonly showMemoryUsage: boolean;
   private readonly accessibility: AccessibilitySettings;
@@ -226,8 +218,7 @@ export class Config {
   private readonly extensionContextFilePaths: string[];
   private readonly noBrowser: boolean;
   private readonly ideMode: boolean;
-  private readonly ideClient: IdeClient | undefined;
-  private inFallbackMode = false;
+  private modelSwitchedDuringSession: boolean = false;
   private readonly maxSessionTurns: number;
   private readonly listExtensions: boolean;
   private readonly _extensions: GeminiCLIExtension[];
@@ -235,6 +226,7 @@ export class Config {
     name: string;
     extensionName: string;
   }>;
+  private readonly listModels: boolean;
   flashFallbackHandler?: FlashFallbackHandler;
   private quotaErrorOccurred: boolean = false;
   private readonly summarizeToolOutput:
@@ -249,6 +241,7 @@ export class Config {
     this.sandbox = params.sandbox;
     this.targetDir = path.resolve(params.targetDir);
     this.debugMode = params.debugMode;
+    this.debugTools = params.debugTools ?? false;
     this.question = params.question;
     this.fullContext = params.fullContext ?? false;
     this.coreTools = params.coreTools;
@@ -258,7 +251,7 @@ export class Config {
     this.mcpServerCommand = params.mcpServerCommand;
     this.mcpServers = params.mcpServers;
     this.userMemory = params.userMemory ?? '';
-    this.geminiMdFileCount = params.geminiMdFileCount ?? 0;
+    this.sprtscltrMdFileCount = params.sprtscltrMdFileCount ?? 0;
     this.approvalMode = params.approvalMode ?? ApprovalMode.DEFAULT;
     this.showMemoryUsage = params.showMemoryUsage ?? false;
     this.accessibility = params.accessibility ?? {};
@@ -292,7 +285,7 @@ export class Config {
     this.noBrowser = params.noBrowser ?? false;
     this.summarizeToolOutput = params.summarizeToolOutput;
     this.ideMode = params.ideMode ?? false;
-    this.ideClient = params.ideClient;
+    this.listModels = params.listModels ?? false;
 
     if (params.contextFileName) {
       setGeminiMdFilename(params.contextFileName);
@@ -317,21 +310,23 @@ export class Config {
     if (this.getCheckpointingEnabled()) {
       await this.getGitService();
     }
-    this.promptRegistry = new PromptRegistry();
     this.toolRegistry = await this.createToolRegistry();
   }
 
   async refreshAuth(authMethod: AuthType) {
+    // Create content generator config with the appropriate auth method
     this.contentGeneratorConfig = createContentGeneratorConfig(
       this,
       authMethod,
     );
 
+    // Initialize the Gemini client
     this.geminiClient = new GeminiClient(this);
+    this.toolRegistry = await this.createToolRegistry();
     await this.geminiClient.initialize(this.contentGeneratorConfig);
 
     // Reset the session flag since we're explicitly changing auth and using default model
-    this.inFallbackMode = false;
+    this.modelSwitchedDuringSession = false;
   }
 
   getSessionId(): string {
@@ -346,18 +341,41 @@ export class Config {
     return this.contentGeneratorConfig?.model || this.model;
   }
 
-  setModel(newModel: string): void {
+  async setModel(newModel: string): Promise<void> {
     if (this.contentGeneratorConfig) {
+      // Avoid reset if the model isn't actually changing
+      if (this.contentGeneratorConfig.model === newModel) {
+        console.log(`Model is already set to '${newModel}'.`);
+        return;
+      }
+
+      // Prevent switching during an active response
+      if (this.geminiClient?.getIsGeneratingResponse()) {
+        throw new Error(
+          'Cannot switch model while a response is being generated. Please wait for it to complete.',
+        );
+      }
+
+      const previousModel = this.contentGeneratorConfig.model;
       this.contentGeneratorConfig.model = newModel;
+      this.modelSwitchedDuringSession = true;
+
+      // Perform handoff to new model while preserving conversation history
+      if (this.geminiClient) {
+        await this.geminiClient.handoffToNewModel(previousModel, newModel);
+      }
     }
   }
 
-  isInFallbackMode(): boolean {
-    return this.inFallbackMode;
+  isModelSwitchedDuringSession(): boolean {
+    return this.modelSwitchedDuringSession;
   }
 
-  setFallbackMode(active: boolean): void {
-    this.inFallbackMode = active;
+  resetModelToDefault(): void {
+    if (this.contentGeneratorConfig) {
+      this.contentGeneratorConfig.model = this.model; // Reset to the original default model
+      this.modelSwitchedDuringSession = false;
+    }
   }
 
   setFlashFallbackHandler(handler: FlashFallbackHandler): void {
@@ -396,13 +414,13 @@ export class Config {
     return Promise.resolve(this.toolRegistry);
   }
 
-  getPromptRegistry(): PromptRegistry {
-    return this.promptRegistry;
-  }
-
   getDebugMode(): boolean {
     return this.debugMode;
   }
+
+  getDebugTools(): boolean {
+    return this.debugTools;
+  }
   getQuestion(): string | undefined {
     return this.question;
   }
@@ -444,11 +462,11 @@ export class Config {
   }
 
   getGeminiMdFileCount(): number {
-    return this.geminiMdFileCount;
+    return this.sprtscltrMdFileCount;
   }
 
   setGeminiMdFileCount(count: number): void {
-    this.geminiMdFileCount = count;
+    this.sprtscltrMdFileCount = count;
   }
 
   getApprovalMode(): ApprovalMode {
@@ -492,7 +510,7 @@ export class Config {
   }
 
   getGeminiDir(): string {
-    return path.join(this.targetDir, GEMINI_DIR);
+    return path.join(this.targetDir, SPRTSCLTR_DIR);
   }
 
   getProjectTempDir(): string {
@@ -556,6 +574,10 @@ export class Config {
     return this.listExtensions;
   }
 
+  getListModels(): boolean {
+    return this.listModels;
+  }
+
   getExtensions(): GeminiCLIExtension[] {
     return this._extensions;
   }
@@ -582,10 +604,6 @@ export class Config {
     return this.ideMode;
   }
 
-  getIdeClient(): IdeClient | undefined {
-    return this.ideClient;
-  }
-
   async getGitService(): Promise<GitService> {
     if (!this.gitService) {
       this.gitService = new GitService(this.targetDir);
@@ -595,7 +613,17 @@ export class Config {
   }
 
   async createToolRegistry(): Promise<ToolRegistry> {
-    const registry = new ToolRegistry(this);
+    const registry = ToolRegistry.getInstance(this);
+
+    // If already initialized, return the existing registry
+    if (registry.isInitialized()) {
+      if (this.getDebugTools()) {
+        console.log(
+          '[TOOL-DEBUG] ToolRegistry already initialized, skipping registration',
+        );
+      }
+      return registry;
+    }
 
     // helper to create & register core tools that are enabled
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -626,10 +654,26 @@ export class Config {
       }
 
       if (isEnabled) {
+        if (this.getDebugTools()) {
+          console.log(
+            `[TOOL-DEBUG] Registering tool: ${toolName} (${className})`,
+          );
+        }
         registry.registerTool(new ToolClass(...args));
+      } else if (this.getDebugTools()) {
+        console.log(
+          `[TOOL-DEBUG] Skipping tool: ${toolName} (${className}), enabled=${isEnabled}`,
+        );
       }
     };
 
+    // Log tool registration if debug tools is enabled
+    if (this.getDebugTools()) {
+      console.log('[TOOL-DEBUG] Starting core tool registration');
+      console.log('[TOOL-DEBUG] Core tools config:', this.getCoreTools());
+      console.log('[TOOL-DEBUG] Exclude tools config:', this.getExcludeTools());
+    }
+
     registerCoreTool(LSTool, this);
     registerCoreTool(ReadFileTool, this);
     registerCoreTool(GrepTool, this);
@@ -642,7 +686,26 @@ export class Config {
     registerCoreTool(MemoryTool);
     registerCoreTool(WebSearchTool, this);
 
-    await registry.discoverAllTools();
+    if (this.getDebugTools()) {
+      const allTools = registry.getAllTools();
+      console.log(`[TOOL-DEBUG] Total tools registered: ${allTools.length}`);
+      allTools.forEach((tool) => {
+        console.log(`[TOOL-DEBUG] - ${tool.name} (${tool.displayName})`);
+      });
+    }
+
+    await registry.discoverTools();
+
+    if (this.getDebugTools()) {
+      const finalTools = registry.getAllTools();
+      console.log(
+        `[TOOL-DEBUG] Total tools after discovery: ${finalTools.length}`,
+      );
+    }
+
+    // Mark the registry as initialized
+    registry.markInitialized();
+
     return registry;
   }
 }
