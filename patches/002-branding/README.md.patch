diff --git a/README.md b/README.md
index 3e2db940..818d75cb 100644
--- a/README.md
+++ b/README.md
@@ -1,21 +1,25 @@
-# Gemini CLI
+# sport-cli - Multi-Provider AI CLI
 
-[![Gemini CLI CI](https://github.com/google-gemini/gemini-cli/actions/workflows/ci.yml/badge.svg)](https://github.com/google-gemini/gemini-cli/actions/workflows/ci.yml)
+[![sport-cli CI](https://github.com/sportsculture/gemini-cli/actions/workflows/ci.yml/badge.svg)](https://github.com/sportsculture/gemini-cli/actions/workflows/ci.yml)
 
-![Gemini CLI Screenshot](./docs/assets/gemini-screenshot.png)
+![sport-cli Screenshot](./docs/assets/sport-screenshot.png)
 
-This repository contains the Gemini CLI, a command-line AI workflow tool that connects to your
-tools, understands your code and accelerates your workflows.
+> **Origin:** sport-cli is a fork of [Google's gemini-cli](https://github.com/google-gemini/gemini-cli), extended with multi-provider AI support and enhanced features. We maintain an upstream remote to incorporate Google's ongoing improvements while adding our own innovations.
 
-With the Gemini CLI you can:
+This repository contains sport-cli, a multi-provider command-line AI workflow tool that connects to your
+tools, understands your code and accelerates your workflows with support for various AI providers.
 
-- Query and edit large codebases in and beyond Gemini's 1M token context window.
-- Generate new apps from PDFs or sketches, using Gemini's multimodal capabilities.
-- Automate operational tasks, like querying pull requests or handling complex rebases.
+With sport-cli you can:
+
+- Query and edit large codebases using multiple AI providers (Gemini, OpenRouter, DeepSeek, and more)
+- Generate new apps from PDFs or sketches, using multimodal AI capabilities
+- Automate operational tasks, like querying pull requests or handling complex rebases
 - Use tools and MCP servers to connect new capabilities, including [media generation with Imagen,
   Veo or Lyria](https://github.com/GoogleCloudPlatform/vertex-ai-creative-studio/tree/main/experiments/mcp-genmedia)
 - Ground your queries with the [Google Search](https://ai.google.dev/gemini-api/docs/grounding)
-  tool, built into Gemini.
+  tool when using Gemini
+- Switch between AI providers seamlessly with the `/model` command
+- Track token usage and costs across different providers
 
 ## Quickstart
 
@@ -27,19 +31,29 @@ You have two options to install Gemini CLI.
 2. **Run the CLI:** Execute the following command in your terminal:
 
    ```bash
-   npx https://github.com/google-gemini/gemini-cli
+   npx https://github.com/sportsculture/gemini-cli
+   ```
+
+   Or install it globally:
+
+   ```bash
+   npm install -g @sport/sport-cli
    ```
 
-   Or install it with:
+   **Alternative: Install from source** (recommended if you have an existing gemini installation):
 
    ```bash
-   npm install -g @google/gemini-cli
+   git clone https://github.com/sportsculture/sport-cli
+   cd sport-cli
+   npm install
+   npm run build
+   npm install -g .
    ```
 
    Then, run the CLI from anywhere:
 
    ```bash
-   gemini
+   sport
    ```
 
 ### With Homebrew
@@ -93,24 +107,127 @@ The Vertex AI API provides a [free tier](https://cloud.google.com/vertex-ai/gene
 
 For other authentication methods, including Google Workspace accounts, see the [authentication](./docs/cli/authentication.md) guide.
 
+### Use OpenRouter for 300+ AI Models:
+
+OpenRouter provides a unified gateway to virtually every major AI model - if it's publicly available, it's on OpenRouter. This includes the latest from OpenAI, Anthropic, Google, xAI, Meta, and more.
+
+**Setup is simple:**
+
+1. Get your API key from [OpenRouter](https://openrouter.ai/keys)
+2. Set it as an environment variable:
+
+   ```bash
+   export OPENROUTER_API_KEY="YOUR_API_KEY"
+   ```
+
+3. Start sport-cli and use the `/model` command to switch between any available model:
+
+   ```bash
+   sport
+   > /model grok-4  # xAI's latest with 73 AI Index score
+   > /model claude-4-opus  # Best for complex coding tasks
+   > /model gpt-4.1  # OpenAI's versatile assistant
+   > /model gemini-2.5-pro  # Google's multimodal powerhouse
+   > /model deepseek-r1  # Cost-effective reasoning model
+   ```
+
+**Popular models and their strengths:**
+
+- **Grok-4** ($3/$15 per M tokens) - Leading reasoning capabilities, outperforms o3 and Claude
+- **Claude 4 Opus** - Exceptional at coding with hybrid instant/thinking architecture
+- **GPT-4.1** - Most cost-efficient for long contexts, great general-purpose model
+- **Gemini 2.5 Pro** - Best for multimodal tasks (images, audio, video)
+- **DeepSeek R1** - Incredibly cost-effective while maintaining high performance
+- **Llama 4** - Open-source option for unrestricted development
+
+**Pro tip:** Many providers offer free tiers! Try models from Mistral, DeepSeek, Google, and Meta without any upfront costs. Perfect for experimenting before committing to paid usage.
+
+With OpenRouter, you're not locked into any single provider's ecosystem - switch models based on your task, budget, or preference. The future of AI is multi-model, and sport-cli puts that power at your fingertips.
+
+### Connecting to Zen MCP Server
+
+The Zen MCP server is a powerful tool that extends the capabilities of the Gemini CLI by providing access to a wider range of models and services. To connect to the Zen MCP server, you need to configure it in your Gemini CLI settings.
+
+**Prerequisites:**
+
+- You need to have `jq` installed on your system. You can install it using your system's package manager (e.g., `brew install jq` on macOS, `sudo apt-get install jq` on Linux).
+- You need to have an `OPENAI_API_KEY` defined in a `.env` file in your project's root directory.
+
+**Configuration:**
+
+To configure the Zen MCP server, run the following command in your terminal. This command will create a shell script and execute it to update your `~/.gemini/settings.json` file.
+
+```bash
+#!/bin/bash
+
+# This script configures the Zen MCP server in your Gemini CLI settings.
+# It adds the necessary server configuration and uses your OpenAI API key
+# from the .env file.
+
+# --- Configuration ---
+OPENAI_KEY=$(grep OPENAI_API_KEY .env | cut -d '=' -f2)
+
+JSON_CONFIG='{
+  "mcpServers": {
+    "zen": {
+      "command": "sh",
+      "args": [
+        "-c",
+        "exec $(which uvx || echo uvx) --from git+https://github.com/BeehiveInnovations/zen-mcp-server.git zen-mcp-server"
+      ],
+      "env": {
+        "PATH": "/usr/local/bin:/usr/bin:/bin:/opt/homebrew/bin:~/.local/bin",
+        "OPENAI_API_KEY": "'"$OPENAI_KEY"'"
+      }
+    }
+  }
+}'
+
+SETTINGS_FILE="$HOME/.gemini/settings.json"
+
+# --- Script ---
+
+# Create settings directory and file if they don't exist
+if [ ! -f "$SETTINGS_FILE" ]; then
+  mkdir -p "$(dirname "$SETTINGS_FILE")"
+  echo "{}" > "$SETTINGS_FILE"
+fi
+
+# Check if jq is installed
+if ! command -v jq &> /dev/null
+then
+    echo "jq could not be found, please install it to continue"
+    exit 1
+fi
+
+# Merge the JSON configuration
+TEMP_FILE=$(mktemp)
+jq -s '.[0] * .[1]' "$SETTINGS_FILE" <(echo "$JSON_CONFIG") > "$TEMP_FILE" && mv "$TEMP_FILE" "$SETTINGS_FILE"
+
+echo "Zen MCP server configured successfully."
+
+```
+
+After running this script, the Zen MCP server will be available as a provider in the Gemini CLI.
+
 ## Examples
 
-Once the CLI is running, you can start interacting with Gemini from your shell.
+Once the CLI is running, you can start interacting with your chosen AI provider from your shell.
 
 You can start a project from a new directory:
 
 ```sh
 cd new-project/
-gemini
-> Write me a Gemini Discord bot that answers questions using a FAQ.md file I will provide
+sport
+> Write me a Discord bot that answers questions using a FAQ.md file I will provide
 ```
 
 Or work with an existing project:
 
 ```sh
-git clone https://github.com/google-gemini/gemini-cli
-cd gemini-cli
-gemini
+git clone https://github.com/sportsculture/sport-cli
+cd sport-cli
+sport
 > Give me a summary of all of the changes that went in yesterday
 ```
 
@@ -142,34 +259,6 @@ Start by `cd`ing into an existing or newly-cloned repository and running `gemini
 > What security mechanisms are in place?
 ```
 
-```text
-> Provide a step-by-step dev onboarding doc for developers new to the codebase.
-```
-
-```text
-> Summarize this codebase and highlight the most interesting patterns or techniques I could learn from.
-```
-
-```text
-> Identify potential areas for improvement or refactoring in this codebase, highlighting parts that appear fragile, complex, or hard to maintain.
-```
-
-```text
-> Which parts of this codebase might be challenging to scale or debug?
-```
-
-```text
-> Generate a README section for the [module name] module explaining what it does and how to use it.
-```
-
-```text
-> What kind of error handling and logging strategies does the project use?
-```
-
-```text
-> Which tools, libraries, and dependencies are used in this project?
-```
-
 ### Work with your existing code
 
 ```text
@@ -206,6 +295,47 @@ Use MCP servers to integrate your local system tools with your enterprise collab
 
 Head over to the [Uninstall](docs/Uninstall.md) guide for uninstallation instructions.
 
+## Fork Maintenance
+
+sport-cli maintains synchronization with the upstream Google gemini-cli repository to benefit from their ongoing improvements while adding our multi-provider enhancements. This section is for developers who want to contribute or understand how we manage the fork.
+
+### Key Principles
+
+1. **Minimize Divergence**: We keep our changes isolated in specific modules (e.g., `providers/` directory) to avoid conflicts
+2. **Clean Git History**: We use rebasing to maintain a linear history when syncing with upstream
+3. **Configurable Branding**: Branding is treated as a configuration layer, not hardcoded changes
+4. **Proper Attribution**: We maintain Google's copyright and clearly acknowledge the fork origin
+
+### Syncing with Upstream
+
+To sync with the latest changes from Google's gemini-cli:
+
+```bash
+# Add upstream remote (one-time setup)
+git remote add upstream https://github.com/google-gemini/gemini-cli.git
+
+# Sync with upstream
+git fetch upstream
+git checkout main
+git rebase upstream/main  # or 'git merge upstream/main' for merge commits
+# Resolve any conflicts, focusing on keeping our provider abstractions intact
+git push origin main
+```
+
+### Development Guidelines
+
+When adding new features:
+
+1. Create feature branches: `git checkout -b feature/your-feature`
+2. Keep commits atomic and well-described
+3. Isolate sport-cli specific features in dedicated directories
+4. Rebase frequently against main to incorporate upstream changes
+5. Submit PRs for review before merging
+
+### Contributing Back
+
+We aim to contribute architectural improvements back to upstream when they benefit the broader community. For example, our provider abstraction layer could enhance testability for the original project.
+
 ## Terms of Service and Privacy Notice
 
 For details on the terms of service and privacy notice applicable to your use of Gemini CLI, see the [Terms of Service and Privacy Notice](./docs/tos-privacy.md).
